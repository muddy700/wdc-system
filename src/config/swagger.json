{
  "openapi": "3.0.0",
  "info": {
    "version": "1.0.0",
    "title": "SE-GRMS APIs",
    "description": "APIs for Stakeholder Engagement and Grievances Redress Mechanism System"
  },
  "servers": [
    {
      "url": "https://se-grms-staging-api.herokuapp.com/api/v1",
      "description": "Staging Server"
    },
    {
      "url": "http://localhost:3000/api/v1",
      "description": "Development Server"
    }
  ],
  "tags": [
    {
      "name": "Auth",
      "description": "REST API-Endpoints For Authentication"
    },
    {
      "name": "Access-Control",
      "description": "REST API-Endpoints For Managing Access"
    },
    {
      "name": "Users",
      "description": "REST API-Endpoints For Users"
    },
    {
      "name": "PIUs",
      "description": "REST API-Endpoints For PIUs"
    },
    {
      "name": "Projects",
      "description": "REST API-Endpoints For Projects"
    },
    {
      "name": "Project-Phases",
      "description": "REST API-Endpoints For Project-Phases"
    },
    {
      "name": "Stakeholders",
      "description": "REST API-Endpoints For Stakeholders"
    },
    {
      "name": "Sub-Projects",
      "description": "REST API-Endpoints For Sub-Projects"
    },
    {
      "name": "Engagement-Plans",
      "description": "REST API-Endpoints For Engagement-Plans"
    },
    {
      "name": "Engagement-Levels",
      "description": "REST API-Endpoints For Engagement-Levels"
    },
    {
      "name": "Commitments",
      "description": "REST API-Endpoints For Commitments"
    },
    {
      "name": "Departments",
      "description": "REST API-Endpoints For Departments"
    },
    {
      "name": "Audit-Trail",
      "description": "REST API-Endpoints For Audit-Trail"
    }
  ],
  "consumes": ["application/json"],
  "produces": ["application/json"],
  "paths": {
    "/auth/login": {
      "post": {
        "tags": ["Auth"],
        "summary": "Authenticate normal user credentials",
        "description": "Get access token for normal user",
        "requestBody": {
          "description": "Login Info",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/definitions/LoginInfo"
              }
            }
          }
        },
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "Ok"
          },
          "400": {
            "description": "Failed. Bad post data"
          },
          "401": {
            "description": "Failed. Unauthorized"
          }
        }
      }
    },
    "/auth/change-password": {
      "parameters": [
        {
          "name": "authorization",
          "in": "header",
          "type": "string",
          "description": "Authorization scheme and access token"
        }
      ],
      "post": {
        "tags": ["Auth"],
        "summary": "Change User Password",
        "description": "",
        "requestBody": {
          "description": "Passwords Info",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/definitions/ChangePasswordInfo"
              }
            }
          }
        },
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "Ok"
          },
          "400": {
            "description": "Failed. Bad post data"
          },
          "401": {
            "description": "Failed. Unauthorized"
          }
        }
      }
    },
    "/auth/forgot-password": {
      "post": {
        "tags": ["Auth"],
        "summary": "Request Password Reset",
        "description": "",
        "requestBody": {
          "description": "Requestor Info",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/definitions/ForgotPasswordInfo"
              }
            }
          }
        },
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "Ok"
          },
          "400": {
            "description": "Failed. Bad post data"
          },
          "401": {
            "description": "Failed. Unauthorized"
          }
        }
      }
    },
    "/auth/reset-password": {
      "parameters": [
        {
          "name": "authorization",
          "in": "header",
          "type": "string",
          "description": "Authorization scheme and access token"
        }
      ],
      "post": {
        "tags": ["Auth"],
        "summary": "Reset Password",
        "description": "",
        "requestBody": {
          "description": "Requestor Info",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/definitions/ResetPasswordInfo"
              }
            }
          }
        },
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "Ok"
          },
          "400": {
            "description": "Failed. Bad post data"
          },
          "401": {
            "description": "Failed. Unauthorized"
          }
        }
      }
    },
    "/access-control/permissions": {
      "parameters": [
        {
          "name": "authorization",
          "in": "header",
          "type": "string",
          "description": "Authorization scheme and access token"
        }
      ],
      "get": {
        "tags": ["Access-Control"],
        "summary": "Retrieve all permissions",
        "description": "",
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "Ok"
          },
          "401": {
            "description": "Failed. Unauthorized"
          },
          "403": {
            "description": "Failed. Forbidden"
          }
        }
      }
    },
    "/access-control/roles/{roleId}/staff": {
      "parameters": [
        {
          "name": "roleId",
          "in": "path",
          "type": "string"
        }
      ],
      "get": {
        "tags": ["Access-Control"],
        "summary": "Retrieve all users with a given role-id",
        "description": "",
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "Ok"
          },
          "401": {
            "description": "Failed. Unauthorized"
          },
          "403": {
            "description": "Failed. Forbidden"
          }
        }
      }
    },
    "/access-control/roles/{roleId}/grant-permission": {
      "parameters": [
        {
          "name": "authorization",
          "in": "header",
          "type": "string",
          "description": "Authorization scheme and access token"
        },
        {
          "name": "roleId",
          "in": "path",
          "required": true,
          "description": "ID of a role that we want to match",
          "type": "string"
        }
      ],
      "patch": {
        "tags": ["Access-Control"],
        "summary": "Update Role Permissions",
        "description": "",
        "requestBody": {
          "description": "Permissions Info",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/definitions/UpdatePermissions"
              }
            }
          }
        },
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "Ok"
          },
          "400": {
            "description": "Failed. Bad post data"
          },
          "401": {
            "description": "Failed. Unauthorized"
          }
        }
      }
    },
    "/access-control/roles": {
      "post": {
        "tags": ["Access-Control"],
        "summary": "Create a new role",
        "description": "Add role",
        "requestBody": {
          "description": "Role Object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Role"
              }
            }
          }
        },
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "Ok"
          },
          "400": {
            "description": "Failed. Bad post data"
          }
        }
      },
      "get": {
        "tags": ["Access-Control"],
        "summary": "List all roles",
        "description": "Get all roles in system",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "type": "string",
            "description": "Authorization scheme and access token"
          },
          {
            "name": "searchQuery",
            "in": "query",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": { "$ref": "#/components/schemas/Role" }
          },
          "500": {
            "description": "Failed. Internal Server Error"
          }
        }
      }
    },
    "/audit-trail": {
      "get": {
        "tags": ["Audit-Trail"],
        "summary": "List all system logs",
        "description": "Get all system logs of all users",
        "responses": {
          "200": {
            "description": "Ok"
          },
          "500": {
            "description": "Failed. Internal Server Error"
          }
        }
      }
    },
    "/access-control/roles/{roleId}": {
      "parameters": [
        {
          "name": "roleId",
          "in": "path",
          "required": true,
          "description": "ID of a role that we want to match",
          "type": "string"
        }
      ],
      "get": {
        "tags": ["Access-Control"],
        "summary": "Get a role with a given ID",
        "description": "",
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "$ref": "#/components/schemas/Role"
            }
          },
          "400": {
            "description": "Failed. Bad post data"
          },
          "404": {
            "description": "Failed. Role not found"
          }
        }
      },
      "patch": {
        "tags": ["Access-Control"],
        "summary": "Update a role with a given ID",
        "description": "",
        "requestBody": {
          "description": "Role Object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Role"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Ok"
          },
          "400": {
            "description": "Failed. Bad post data"
          },
          "404": {
            "description": "Failed. Role not found"
          }
        }
      },
      "delete": {
        "tags": ["Access-Control"],
        "summary": "Delete a role with a given ID",
        "description": "",
        "responses": {
          "200": {
            "description": "Ok"
          },
          "400": {
            "description": "Failed. Bad post data"
          },
          "404": {
            "description": "Failed. Role not found"
          }
        }
      }
    },
    "/users/invite": {
      "post": {
        "tags": ["Users"],
        "summary": "Create new staff",
        "description": "Add staff",
        "requestBody": {
          "description": "User Object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          }
        },
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "Ok"
          },
          "400": {
            "description": "Failed. Bad post data"
          }
        }
      }
    },
    "/users": {
      "post": {
        "tags": ["Users"],
        "summary": "Create new user",
        "description": "Add user",
        "requestBody": {
          "description": "User Object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          }
        },
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "Ok"
          },
          "400": {
            "description": "Failed. Bad post data"
          }
        }
      },
      "get": {
        "tags": ["Users"],
        "summary": "List all users",
        "description": "Get all users in system",
        "parameters": [
          {
            "name": "searchQuery",
            "in": "query",
            "required": true,
            "description": "user-name, role, or phone number of a user that we want to match",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok"
          },
          "500": {
            "description": "Failed. Internal Server Error"
          }
        }
      }
    },
    "/pius": {
      "post": {
        "tags": ["PIUs"],
        "summary": "Create new PIU",
        "description": "Add PIU",
        "requestBody": {
          "description": "PIU Object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PIU"
              }
            }
          }
        },
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "Ok"
          },
          "400": {
            "description": "Failed. Bad post data"
          }
        }
      },
      "get": {
        "tags": ["PIUs"],
        "summary": "List all PIUs",
        "description": "Get all PIUs in system",
        "parameters": [
          {
            "name": "searchQuery",
            "in": "query",
            "required": true,
            "description": "registeredName of a PIU that we want to match",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok"
          },
          "500": {
            "description": "Failed. Internal Server Error"
          }
        }
      }
    },
    "/projects": {
      "post": {
        "tags": ["Projects"],
        "summary": "Create new Project",
        "description": "Add Project",
        "requestBody": {
          "description": "Project Object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Project"
              }
            }
          }
        },
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "Ok"
          },
          "400": {
            "description": "Failed. Bad post data"
          }
        }
      },
      "get": {
        "tags": ["Projects"],
        "summary": "List all Projects",
        "description": "Get all Projects in system",
        "parameters": [
          {
            "name": "searchQuery",
            "in": "query",
            "required": true,
            "description": "Name of a Project that we want to match",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok"
          },
          "500": {
            "description": "Failed. Internal Server Error"
          }
        }
      }
    },
    "/commitments": {
      "post": {
        "tags": ["Commitments"],
        "summary": "Create new Commitment",
        "description": "Add Commitment",
        "requestBody": {
          "description": "Commitment Object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Commitment"
              }
            }
          }
        },
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "Ok"
          },
          "400": {
            "description": "Failed. Bad post data"
          }
        }
      },
      "get": {
        "tags": ["Commitments"],
        "summary": "List all Commitments",
        "description": "Get all Commitments in system",
        "parameters": [
          {
            "name": "searchQuery",
            "in": "query",
            "required": true,
            "description": "Activity of a Project that we want to match",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok"
          },
          "500": {
            "description": "Failed. Internal Server Error"
          }
        }
      }
    },
    "/departments": {
      "post": {
        "tags": ["Departments"],
        "summary": "Create new Department",
        "description": "Add Department",
        "requestBody": {
          "description": "Department Object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Department"
              }
            }
          }
        },
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "Ok"
          },
          "400": {
            "description": "Failed. Bad post data"
          }
        }
      },
      "get": {
        "tags": ["Departments"],
        "summary": "List all Departments",
        "description": "Get all Departments in system",
        "parameters": [
          {
            "name": "searchQuery",
            "in": "query",
            "required": true,
            "description": "Name of a Department that we want to match",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok"
          },
          "500": {
            "description": "Failed. Internal Server Error"
          }
        }
      }
    },
    "/stakeholders": {
      "post": {
        "tags": ["Stakeholders"],
        "summary": "Create new stakeholder",
        "description": "Add stakeholder",
        "requestBody": {
          "description": "Stakeholder Object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Stakeholder"
              }
            }
          }
        },
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "Ok"
          },
          "400": {
            "description": "Failed. Bad post data"
          }
        }
      },
      "get": {
        "tags": ["Stakeholders"],
        "summary": "List all stakeholders",
        "description": "Get all stakeholders in system",
        "parameters": [
          {
            "name": "searchQuery",
            "in": "query",
            "required": true,
            "description": "Name of a stakeholder that we want to match",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok"
          },
          "500": {
            "description": "Failed. Internal Server Error"
          }
        }
      }
    },
    "/engagement-plans": {
      "post": {
        "tags": ["Engagement-Plans"],
        "summary": "Create new Engagement-Plan",
        "description": "Add Engagement-Plan",
        "requestBody": {
          "description": "Engagement-Plan Object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EngagementPlan"
              }
            }
          }
        },
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "Ok"
          },
          "400": {
            "description": "Failed. Bad post data"
          }
        }
      },
      "get": {
        "tags": ["Engagement-Plans"],
        "summary": "List all Engagement-Plans",
        "description": "Get all Engagement-Plans in system",
        "parameters": [
          {
            "name": "searchQuery",
            "in": "query",
            "required": true,
            "description": "activity of Engagement-Plans that we want to match",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok"
          },
          "500": {
            "description": "Failed. Internal Server Error"
          }
        }
      }
    },
    "/engagement-levels": {
      "post": {
        "tags": ["Engagement-Levels"],
        "summary": "Create new Engagement-Level",
        "description": "Add Engagement-Level",
        "requestBody": {
          "description": "Engagement-Level Object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EngagementLevel"
              }
            }
          }
        },
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "Ok"
          },
          "400": {
            "description": "Failed. Bad post data"
          }
        }
      },
      "get": {
        "tags": ["Engagement-Levels"],
        "summary": "List all Engagement-Levels",
        "description": "Get all Engagement-Levels in system",
        "parameters": [
          {
            "name": "searchQuery",
            "in": "query",
            "required": true,
            "description": "Current-Level of Engagement-Levels that we want to match",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok"
          },
          "500": {
            "description": "Failed. Internal Server Error"
          }
        }
      }
    },
    "/sub-projects": {
      "post": {
        "tags": ["Sub-Projects"],
        "summary": "Create new Sub-Project",
        "description": "Add Sub-Project",
        "requestBody": {
          "description": "Sub-Project Object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SubProject"
              }
            }
          }
        },
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "Ok"
          },
          "400": {
            "description": "Failed. Bad post data"
          }
        }
      },
      "get": {
        "tags": ["Sub-Projects"],
        "summary": "List all Sub-Projects",
        "description": "Get all Sub-Projects in system",
        "parameters": [
          {
            "name": "searchQuery",
            "in": "query",
            "required": true,
            "description": "Name of a Sub-Project that we want to match",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok"
          },
          "500": {
            "description": "Failed. Internal Server Error"
          }
        }
      }
    },
    "/project-phases": {
      "post": {
        "tags": ["Project-Phases"],
        "summary": "Create new Project-Phase",
        "description": "Add Project-Phase",
        "requestBody": {
          "description": "Project-Phase Object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProjectPhase"
              }
            }
          }
        },
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "Ok"
          },
          "400": {
            "description": "Failed. Bad post data"
          }
        }
      },
      "get": {
        "tags": ["Project-Phases"],
        "summary": "List all Project-Phases",
        "description": "Get all Project-Phases in system",
        "parameters": [
          {
            "name": "searchQuery",
            "in": "query",
            "required": true,
            "description": "Name of a Project-Phase that we want to match",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok"
          },
          "500": {
            "description": "Failed. Internal Server Error"
          }
        }
      }
    },
    "/users/{id}": {
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "description": "ID of a user that we want to match",
          "type": "string"
        }
      ],
      "get": {
        "tags": ["Users"],
        "summary": "Get user with a given ID",
        "description": "",
        "responses": {
          "200": {
            "description": "Ok"
          },
          "400": {
            "description": "Failed. Bad post data"
          },
          "404": {
            "description": "Failed. User not found"
          }
        }
      },
      "patch": {
        "tags": ["Users"],
        "summary": "Update user with a given ID",
        "description": "",
        "requestBody": {
          "description": "User Object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Ok"
          },
          "400": {
            "description": "Failed. Bad post data"
          },
          "404": {
            "description": "Failed. User not found"
          }
        }
      },
      "delete": {
        "tags": ["Users"],
        "summary": "Delete user with a given ID",
        "description": "",
        "responses": {
          "200": {
            "description": "Ok"
          },
          "400": {
            "description": "Failed. Bad post data"
          },
          "404": {
            "description": "Failed. User not found"
          }
        }
      }
    },
    "/projects/{projectId}": {
      "parameters": [
        {
          "name": "projectId",
          "in": "path",
          "required": true,
          "description": "ID of a project that we want to match",
          "type": "string"
        }
      ],
      "get": {
        "tags": ["Projects"],
        "summary": "Get project with a given ID",
        "description": "",
        "responses": {
          "200": {
            "description": "Ok"
          },
          "400": {
            "description": "Failed. Bad post data"
          },
          "404": {
            "description": "Failed. Project not found"
          }
        }
      },
      "put": {
        "tags": ["Projects"],
        "summary": "Update project with a given ID",
        "description": "",
        "requestBody": {
          "description": "Project Object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Project"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Ok"
          },
          "400": {
            "description": "Failed. Bad post data"
          },
          "404": {
            "description": "Failed. Project not found"
          }
        }
      },
      "delete": {
        "tags": ["Projects"],
        "summary": "Delete project with a given ID",
        "description": "",
        "responses": {
          "200": {
            "description": "Ok"
          },
          "400": {
            "description": "Failed. Bad post data"
          },
          "404": {
            "description": "Failed. Project not found"
          }
        }
      }
    },
    "/commitments/{commitmentId}": {
      "parameters": [
        {
          "name": "commitmentId",
          "in": "path",
          "required": true,
          "description": "ID of a Commitment that we want to match",
          "type": "string"
        }
      ],
      "get": {
        "tags": ["Commitments"],
        "summary": "Get Commitment with a given ID",
        "description": "",
        "responses": {
          "200": {
            "description": "Ok"
          },
          "400": {
            "description": "Failed. Bad post data"
          },
          "404": {
            "description": "Failed. Commitment not found"
          }
        }
      },
      "put": {
        "tags": ["Commitments"],
        "summary": "Update Commitment with a given ID",
        "description": "",
        "requestBody": {
          "description": "Commitment Object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Commitment"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Ok"
          },
          "400": {
            "description": "Failed. Bad post data"
          },
          "404": {
            "description": "Failed. Commitment not found"
          }
        }
      },
      "delete": {
        "tags": ["Commitments"],
        "summary": "Delete Commitment with a given ID",
        "description": "",
        "responses": {
          "200": {
            "description": "Ok"
          },
          "400": {
            "description": "Failed. Bad post data"
          },
          "404": {
            "description": "Failed. Commitment not found"
          }
        }
      }
    },
    "/departments/{departmentId}": {
      "parameters": [
        {
          "name": "departmentId",
          "in": "path",
          "required": true,
          "description": "ID of a department that we want to match",
          "type": "string"
        }
      ],
      "get": {
        "tags": ["Departments"],
        "summary": "Get Department with a given ID",
        "description": "",
        "responses": {
          "200": {
            "description": "Ok"
          },
          "400": {
            "description": "Failed. Bad post data"
          },
          "404": {
            "description": "Failed. Department not found"
          }
        }
      },
      "put": {
        "tags": ["Departments"],
        "summary": "Update Department with a given ID",
        "description": "",
        "requestBody": {
          "description": "Department Object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Department"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Ok"
          },
          "400": {
            "description": "Failed. Bad post data"
          },
          "404": {
            "description": "Failed. Department not found"
          }
        }
      },
      "delete": {
        "tags": ["Departments"],
        "summary": "Delete Department with a given ID",
        "description": "",
        "responses": {
          "200": {
            "description": "Ok"
          },
          "400": {
            "description": "Failed. Bad post data"
          },
          "404": {
            "description": "Failed. Department not found"
          }
        }
      }
    },
    "/stakeholders/{stakeholderId}": {
      "parameters": [
        {
          "name": "stakeholderId",
          "in": "path",
          "required": true,
          "description": "ID of a stakeholder that we want to match",
          "type": "string"
        }
      ],
      "get": {
        "tags": ["Stakeholders"],
        "summary": "Get stakeholder with a given ID",
        "description": "",
        "responses": {
          "200": {
            "description": "Ok"
          },
          "400": {
            "description": "Failed. Bad post data"
          },
          "404": {
            "description": "Failed. stakeholder not found"
          }
        }
      },
      "put": {
        "tags": ["Stakeholders"],
        "summary": "Update stakeholder with a given ID",
        "description": "",
        "requestBody": {
          "description": "Stakeholder Object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Stakeholder"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Ok"
          },
          "400": {
            "description": "Failed. Bad post data"
          },
          "404": {
            "description": "Failed. Stakeholder not found"
          }
        }
      },
      "delete": {
        "tags": ["Stakeholders"],
        "summary": "Delete stakeholder with a given ID",
        "description": "",
        "responses": {
          "200": {
            "description": "Ok"
          },
          "400": {
            "description": "Failed. Bad post data"
          },
          "404": {
            "description": "Failed. Stakeholder not found"
          }
        }
      }
    },
    "/stakeholders/by-query": {
      "get": {
        "tags": ["Stakeholders"],
        "summary": "List Stakeholders using multiple filters",
        "description": "Get all Stakeholders which match the given query parameters",
        "parameters": [
          {
            "name": "project",
            "in": "query",
            "type": "string"
          },
          {
            "name": "role",
            "in": "query",
            "type": "string"
          },
          {
            "name": "scope",
            "in": "query",
            "type": "string"
          },
          {
            "name": "type",
            "in": "query",
            "type": "string"
          },
          {
            "name": "email",
            "in": "query",
            "type": "string"
          },
          {
            "name": "levelOfInterest",
            "in": "query",
            "type": "string"
          },
          {
            "name": "levelOfInfluence",
            "in": "query",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok"
          },
          "500": {
            "description": "Failed. Internal Server Error"
          }
        }
      }
    },
    "/engagement-plans/{engagementPlanId}": {
      "parameters": [
        {
          "name": "engagementPlanId",
          "in": "path",
          "required": true,
          "description": "ID of Engagement-Plan that we want to match",
          "type": "string"
        }
      ],
      "get": {
        "tags": ["Engagement-Plans"],
        "summary": "Get Engagement-Plan with a given ID",
        "description": "",
        "responses": {
          "200": {
            "description": "Ok"
          },
          "400": {
            "description": "Failed. Bad post data"
          },
          "404": {
            "description": "Failed. Engagement-Plan not found"
          }
        }
      },
      "put": {
        "tags": ["Engagement-Plans"],
        "summary": "Update Engagement-Plan with a given ID",
        "description": "",
        "requestBody": {
          "description": "Engagement-Plan Object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EngagementPlan"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Ok"
          },
          "400": {
            "description": "Failed. Bad post data"
          },
          "404": {
            "description": "Failed. Engagement-Plan not found"
          }
        }
      },
      "delete": {
        "tags": ["Engagement-Plans"],
        "summary": "Delete Engagement-Plan with a given ID",
        "description": "",
        "responses": {
          "200": {
            "description": "Ok"
          },
          "400": {
            "description": "Failed. Bad post data"
          },
          "404": {
            "description": "Failed. Engagement-Plan not found"
          }
        }
      }
    },
    "/engagement-levels/{engagementLevelId}": {
      "parameters": [
        {
          "name": "engagementLevelId",
          "in": "path",
          "required": true,
          "description": "ID of Engagement-Level that we want to match",
          "type": "string"
        }
      ],
      "get": {
        "tags": ["Engagement-Levels"],
        "summary": "Get Engagement-Level with a given ID",
        "description": "",
        "responses": {
          "200": {
            "description": "Ok"
          },
          "400": {
            "description": "Failed. Bad post data"
          },
          "404": {
            "description": "Failed. Engagement-Level not found"
          }
        }
      },
      "put": {
        "tags": ["Engagement-Levels"],
        "summary": "Update Engagement-Level with a given ID",
        "description": "",
        "requestBody": {
          "description": "Engagement-Level Object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EngagementLevel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Ok"
          },
          "400": {
            "description": "Failed. Bad post data"
          },
          "404": {
            "description": "Failed. Engagement-Level not found"
          }
        }
      },
      "delete": {
        "tags": ["Engagement-Levels"],
        "summary": "Delete Engagement-Level with a given ID",
        "description": "",
        "responses": {
          "200": {
            "description": "Ok"
          },
          "400": {
            "description": "Failed. Bad post data"
          },
          "404": {
            "description": "Failed. Engagement-Level not found"
          }
        }
      }
    },
    "/sub-projects/{subProjectId}": {
      "parameters": [
        {
          "name": "subProjectId",
          "in": "path",
          "required": true,
          "description": "ID of a sub-project that we want to match",
          "type": "string"
        }
      ],
      "get": {
        "tags": ["Sub-Projects"],
        "summary": "Get sub-project with a given ID",
        "description": "",
        "responses": {
          "200": {
            "description": "Ok"
          },
          "400": {
            "description": "Failed. Bad post data"
          },
          "404": {
            "description": "Failed. Sub-Project not found"
          }
        }
      },
      "put": {
        "tags": ["Sub-Projects"],
        "summary": "Update sub-project with a given ID",
        "description": "",
        "requestBody": {
          "description": "Sub-Project Object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SubProject"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Ok"
          },
          "400": {
            "description": "Failed. Bad post data"
          },
          "404": {
            "description": "Failed. Sub-Project not found"
          }
        }
      },
      "delete": {
        "tags": ["Sub-Projects"],
        "summary": "Delete sub-project with a given ID",
        "description": "",
        "responses": {
          "200": {
            "description": "Ok"
          },
          "400": {
            "description": "Failed. Bad post data"
          },
          "404": {
            "description": "Failed. Sub-Project not found"
          }
        }
      }
    },
    "/pius/{piuId}": {
      "parameters": [
        {
          "name": "piuId",
          "in": "path",
          "required": true,
          "description": "ID of a PIU that we want to match",
          "type": "string"
        }
      ],
      "get": {
        "tags": ["PIUs"],
        "summary": "Get PIU with a given ID",
        "description": "",
        "responses": {
          "200": {
            "description": "Ok"
          },
          "400": {
            "description": "Failed. Bad post data"
          },
          "404": {
            "description": "Failed. PIU not found"
          }
        }
      },
      "put": {
        "tags": ["PIUs"],
        "summary": "Update PIU with a given ID",
        "description": "",
        "requestBody": {
          "description": "PIU Object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PIU"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Ok"
          },
          "400": {
            "description": "Failed. Bad post data"
          },
          "404": {
            "description": "Failed. PIU not found"
          }
        }
      },
      "delete": {
        "tags": ["PIUs"],
        "summary": "Delete PIU with a given ID",
        "description": "",
        "responses": {
          "200": {
            "description": "Ok"
          },
          "400": {
            "description": "Failed. Bad post data"
          },
          "404": {
            "description": "Failed. PIU not found"
          }
        }
      }
    },
    "/project-phases/{projectPhaseId}": {
      "parameters": [
        {
          "name": "projectPhaseId",
          "in": "path",
          "required": true,
          "description": "ID of a Project-Phase that we want to match",
          "type": "string"
        }
      ],
      "get": {
        "tags": ["Project-Phases"],
        "summary": "Get Project-Phase with a given ID",
        "description": "",
        "responses": {
          "200": {
            "description": "Ok"
          },
          "400": {
            "description": "Failed. Bad post data"
          },
          "404": {
            "description": "Failed. Project-Phase not found"
          }
        }
      },
      "put": {
        "tags": ["Project-Phases"],
        "summary": "Update Project-Phase with a given ID",
        "description": "",
        "requestBody": {
          "description": "Project-Phase Object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProjectPhase"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Ok"
          },
          "400": {
            "description": "Failed. Bad post data"
          },
          "404": {
            "description": "Failed. Project-Phase not found"
          }
        }
      },
      "delete": {
        "tags": ["Project-Phases"],
        "summary": "Delete Project-Phase with a given ID",
        "description": "",
        "responses": {
          "200": {
            "description": "Ok"
          },
          "400": {
            "description": "Failed. Bad post data"
          },
          "404": {
            "description": "Failed. Project-Phase not found"
          }
        }
      }
    }
  },
  "definitions": {
    "LoginInfo": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string",
          "required": true,
          "example": "jdoe@gmail.com"
        },
        "password": {
          "type": "string",
          "required": true,
          "example": "12345678"
        }
      }
    },
    "Attachment": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "required": true,
          "example": "audio | video | image | pdf"
        },
        "title": {
          "type": "string",
          "required": true,
          "example": "Problem of statement"
        },
        "description": {
          "type": "string",
          "example": "Some description about an attachment"
        },
        "url": {
          "type": "string",
          "required": true,
          "example": "Url-to-cloud-storage"
        }
      }
    },
    "Address": {
      "type": "object",
      "properties": {
        "country": {
          "type": "string",
          "example": "Tanzania",
          "required": true
        },
        "region": { "type": "string", "example": "Dar", "required": true },
        "district": { "type": "string", "example": "Ilala", "required": true },
        "street": { "type": "string", "example": "Mabibo" },
        "postalCode": { "type": "string", "example": "123 Dar" }
      }
    },
    "Location": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "example": "Temeke, Tanzania",
          "required": true
        },
        "latitude": { "type": "string", "example": "123456789" },
        "longitude": { "type": "string", "example": "98765432" }
      }
    },
    "SocialMedia": {
      "type": "object",
      "properties": {
        "name": { "type": "string", "example": "instagram" },
        "url": { "type": "string", "example": "url-to-instagram-profile" }
      }
    },
    "Branch": {
      "type": "object",
      "properties": {
        "address": {
          "$ref": "#/definitions/Address"
        },
        "location": {
          "$ref": "#/definitions/Location"
        }
      }
    },
    "ContactPerson": {
      "type": "object",
      "properties": {
        "gender": { "type": "string", "example": "M | F", "required": true },
        "position": {
          "type": "string",
          "example": "CEO | COO | Sales Manager",
          "required": true
        },
        "disability": {
          "type": "string",
          "example": "None | physical disability | deaf | vision Impairment "
        },
        "email": {
          "type": "string",
          "example": "user@mail.test",
          "required": true
        },
        "name": {
          "type": "string",
          "example": "Sasha Maganga",
          "required": true
        },
        "phoneNumber": { "type": "string", "example": "255789101112" },
        "physicalAddress": { "type": "string", "example": "123 Kibaha Pwani" },
        "description": { "type": "string", "example": "some description here" }
      }
    },
    "Company": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "example": "ABC Group"
        },
        "logo": {
          "type": "string",
          "example": "url-to-cloud-image"
        },
        "websiteLink": {
          "type": "string",
          "example": "www.ipfsoftwares.com"
        },
        "email": {
          "type": "string",
          "required": true,
          "example": "jd@gmail.com"
        },
        "phoneNumber": {
          "type": "string",
          "required": true,
          "example": "255789101112"
        },
        "stakeholderPosition": {
          "type": "string",
          "example": "CEO | COO | Sales Manager",
          "required": true
        }
      }
    },
    "ChangePasswordInfo": {
      "type": "object",
      "properties": {
        "oldPassword": {
          "type": "string",
          "required": true,
          "example": "12345678"
        },
        "password": {
          "type": "string",
          "required": true,
          "example": "jdoe@12345"
        }
      }
    },
    "ForgotPasswordInfo": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string",
          "required": true,
          "example": "jdoe@gmail.com"
        },
        "userType": {
          "type": "string",
          "required": true,
          "example": "user"
        }
      }
    },
    "ResetPasswordInfo": {
      "type": "object",
      "properties": {
        "password": {
          "type": "string",
          "required": true,
          "example": "jdoe@ipf#12345"
        }
      }
    },
    "UpdatePermissions": {
      "type": "object",
      "properties": {
        "permissions": {
          "type": "object",
          "properties": {
            "added": { "type": "array", "items": {} },
            "removed": { "type": "array", "items": {} }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Role": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "required": true,
            "example": "Admin"
          },
          "description": {
            "type": "string",
            "example": "Super user used to onboard others"
          },
          "permissions": {
            "type": "array",
            "items": {}
          }
        }
      },
      "Project": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "required": true,
            "example": "Iringa Road Construction"
          },
          "description": {
            "type": "string",
            "example": "Some description for this project goes here."
          },
          "abbreviation": {
            "type": "string",
            "example": "IRC"
          },
          "continent": {
            "type": "string",
            "example": "Africa"
          },
          "country": {
            "type": "string",
            "example": "Tanzania"
          },
          "piu": {
            "type": "string",
            "required": true,
            "example": "piu-id"
          },
          "budget": {
            "type": "number",
            "example": 5000000
          },
          "progress": {
            "type": "number",
            "example": 50
          },
          "startDate": {
            "type": "date",
            "example": "2020-06-15"
          },
          "endDate": {
            "type": "date",
            "example": "2023-02-08"
          },
          "attachments": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Attachment"
            }
          }
        }
      },
      "ProjectPhase": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "required": true,
            "example": "Preparation"
          },
          "description": {
            "type": "string",
            "example": "Some description for this project-phase goes here."
          },
          "project": {
            "type": "string",
            "required": true,
            "example": "project-id"
          }
        }
      },
      "SubProject": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "required": true,
            "example": "Iringa Road Construction Part-A"
          },
          "description": {
            "type": "string",
            "example": "Some description for this sub-project goes here."
          },
          "parentProject": {
            "type": "string",
            "required": true,
            "example": "project-id"
          }
        }
      },
      "Stakeholder": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "required": true,
            "example": "John Doe"
          },
          "description": {
            "type": "string",
            "example": "Some description about this stakeholder goes here."
          },
          "project": {
            "type": "string",
            "required": true,
            "example": "project-id"
          },
          "scope": {
            "type": "string",
            "required": true,
            "example": "internal | external"
          },
          "type": {
            "type": "string",
            "required": true,
            "example": "individual | positional | organizational"
          },
          "role": {
            "type": "string",
            "required": true,
            "example": "Advisor | Supplier | Approver | Beneficiary | Contractor"
          },
          "levelOfInterest": {
            "type": "string",
            "required": true,
            "example": "weak | medium | strong"
          },
          "levelOfInfluence": {
            "type": "string",
            "required": true,
            "example": "weak | medium | strong"
          },
          "concern": {
            "type": "string",
            "example": "Concerns of a stakeholder about this project go here."
          },
          "goals": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "sectors": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "address": {
            "$ref": "#/definitions/Address",
            "required": true
          },
          "location": {
            "$ref": "#/definitions/Location",
            "required": true
          },
          "email": {
            "type": "string",
            "required": true,
            "example": "jd@gmail.com"
          },
          "phoneNumber": {
            "type": "string",
            "required": true,
            "example": "255789101112"
          },
          "relationshipHolder": {
            "$ref": "#/definitions/ContactPerson",
            "required": true
          },
          "bestMethodOfContact": {
            "type": "string",
            "example": "phone | email | physical"
          },
          "contactPerson": {
            "$ref": "#/definitions/ContactPerson",
            "required": true
          },
          "logo": {
            "type": "string",
            "example": "url-to-cloud-image"
          },
          "websiteLink": {
            "type": "string",
            "example": "www.ipfsoftwares.com"
          },
          "gender": { "type": "string", "example": "M | F" },
          "disability": {
            "type": "string",
            "example": "None | physical disability | deaf | vision Impairment "
          },
          "company": {
            "$ref": "#/definitions/Company"
          }
        }
      },
      "EngagementLevel": {
        "type": "object",
        "properties": {
          "stakeholder": {
            "type": "string",
            "required": true,
            "example": "stakeholder-id"
          },
          "projectPhase": {
            "type": "string",
            "required": true,
            "example": "projectPhase-id"
          },
          "desiredLevel": {
            "type": "string",
            "required": true,
            "example": "Resilient | Resistant"
          },
          "currentLevel": {
            "type": "string",
            "required": true,
            "example": "Resilient | Resistant"
          }
        }
      },
      "Department": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "required": true,
            "example": "Finance"
          },
          "description": {
            "type": "string",
            "example": "some description about this department"
          },
          "piu": {
            "type": "string",
            "required": true,
            "example": "piu-id"
          }
        }
      },
      "Commitment": {
        "type": "object",
        "properties": {
          "activity": {
            "type": "string",
            "required": true,
            "example": "To plant trees in all area affected by the project"
          },
          "description": {
            "type": "string",
            "example": "some description about this department"
          },
          "project": {
            "type": "string",
            "required": true,
            "example": "project-id"
          },
          "projectPhase": {
            "type": "string",
            "required": true,
            "example": "projectPhase-id"
          },
          "actor": {
            "type": "string",
            "required": true,
            "example": "stakeholder-id | user-id"
          },
          "onModel": {
            "type": "string",
            "required": true,
            "example": "Stakeholder | User"
          },
          "status": {
            "type": "string",
            "required": true,
            "example": "pending | inprogress | delivered"
          },
          "startDate": {
            "type": "Date",
            "required": true,
            "example": "2022-6-15"
          },
          "endDate": {
            "type": "Date",
            "required": true,
            "example": "2022-6-15"
          },
          "completedOn": {
            "type": "Date",
            "example": "2022-6-15"
          },
          "attachments": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Attachment"
            }
          },
          "comments": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "authorName": {
                  "type": "string",
                  "required": true,
                  "example": "John Doe"
                },
                "message": {
                  "type": "string",
                  "required": true,
                  "example": "Some comment goes here."
                }
              }
            }
          }
        }
      },
      "EngagementPlan": {
        "type": "object",
        "properties": {
          "project": {
            "type": "string",
            "required": true,
            "example": "project-id"
          },
          "stakeholder": {
            "type": "string",
            "required": true,
            "example": "stakeholder-id"
          },
          "activity": {
            "type": "string",
            "required": true,
            "example": "Will provide salary advance to all day workers"
          },
          "frequency": {
            "type": "string",
            "required": true,
            "example": "everyday | weekly | monthly"
          },
          "channel": {
            "type": "string",
            "required": true,
            "example": "email | phone | physical"
          },
          "projectPhase": {
            "type": "string",
            "required": true,
            "example": "preparation | implementation "
          },
          "startingDate": {
            "type": "Date",
            "required": true,
            "example": "2022-6-15"
          }
        }
      },
      "User": {
        "type": "object",
        "properties": {
          "firstName": {
            "type": "string",
            "required": true,
            "example": "John"
          },
          "middleName": { "type": "string", "example": "M" },
          "lastName": { "type": "string", "required": true, "example": "Doe" },
          "email": {
            "type": "string",
            "required": true,
            "example": "jd@gmail.com"
          },
          "phoneNumber": {
            "type": "string",
            "required": true,
            "example": "255789101112"
          },
          "gender": { "type": "string", "example": "M | F" },
          "password": {
            "type": "string",
            "required": true,
            "example": "password",
            "format": "password"
          },
          "type": { "type": "string", "example": "user" },
          "company": { "type": "string", "example": "iPF" },
          "lastLocation": { "type": "string", "example": "magomeni" },
          "status": { "type": "number", "example": 1 },
          "role": { "type": "string", "example": "role-id" },
          "piu": { "type": "string", "example": "piu-id" },
          "project": { "type": "string", "example": "project-id" },
          "address": {
            "$ref": "#/definitions/Address"
          }
        }
      },
      "PIU": {
        "type": "object",
        "properties": {
          "logo": { "type": "string", "example": "logo-url" },
          "email": {
            "type": "string",
            "example": "user@mail.test",
            "required": true
          },
          "vision": {
            "type": "string",
            "example": "some vision description here"
          },
          "mission": {
            "type": "string",
            "example": "some mission description here"
          },
          "yearFound": { "type": "number", "example": "2016" },
          "phoneNumber": {
            "type": "string",
            "example": "255789101112",
            "required": true
          },
          "websiteLink": { "type": "string", "example": "link-here" },
          "registeredName": {
            "type": "string",
            "example": "Biashara Plus",
            "required": true
          },
          "abbreviation": { "type": "string", "example": "BP" },
          "registrationNumber": {
            "type": "string",
            "example": "TZA-2016-00003"
          },
          "address": {
            "$ref": "#/definitions/Address",
            "required": true
          },
          "location": {
            "$ref": "#/definitions/Location",
            "required": true
          },
          "contactPerson": {
            "$ref": "#/definitions/ContactPerson",
            "required": true
          },
          "branches": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Branch"
            }
          },
          "socialMedias": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/SocialMedia"
            }
          },
          "sectors": {
            "type": "array",
            "items": { "type": "string", "example": "Education" }
          }
        }
      }
    }
  }
}
